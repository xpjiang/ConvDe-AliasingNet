function net = initialize_NET()
%% network setting
config; % �������
fN = trainOpts.FilterNumber; % ��ʽ��6���е�L��8
fS = trainOpts.FilterSize; % 3
WD = trainOpts.weightDecay; % 0
LR = trainOpts.learningRate;
LL = trainOpts.LinearLabel; % ��ʽ��8���е�p,  -1:0.02:1,  1*101
stageN = trainOpts.Stage; % ��ʽ�е�n��  5
s = fS*fS;
%% network parameters
% X��
Rho = (1e-2) * 20;
% A
lr = 0.3;
mu2 = Rho*lr;
mu1 = 1-mu2;
% C1
gamma = eye(s,fN);
B = filter_base( );% DCT+tv
H = zeros(fS, fS, fN);
for i = 1 : fN
    H(:,:,i) = reshape(B*gamma(:,i),fS,fS);
    w1(:,:,1,i) = H(:,:,i);
end
b1 = zeros(1,fN,'double');
% H control points
r = (1 / 20);
linew = zeros(length(LL) , fN , 'double'); % 101*8
for i=1:fN
    linew (: , i) = nnsoft (LL, r); 
end
% C2
lamda = 0.25;
HT = rot90(H,2);
for i = 1 : fN
    w2(:,:,i,1) = lr*lamda*HT(:,:,i);
end
b2 = zeros(1,2,'double');
% beta 
Eta = 1.80;
%% Network structure
net.layers = {};
% the first stage
net.layers{end+1} = struct('type','X_org',...
    'weights',{{ Rho}},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'momentum', {{0}});
net.layers{end+1} = struct('type', 'A_org',...
    'weights',{{mu2}},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'momentum', {{0}});
net.layers{end+1} = struct('type', 'C1',...
    'weights',{{ w1,b1 }},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'pad', 1, ...
    'stride', 1,...
    'dilate', 1);
net.layers{end+1} = struct('type', 'H',...
    'weights',{{linew}},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'momentum', {{0}});
net.layers{end+1} = struct('type', 'C2',...
    'weights',{{ w2,b2 }},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'pad', 1, ...
    'stride', 1,...
    'dilate', 1);
net.layers{end+1} = struct('type', 'A_mid',...
    'weights',{{mu1,mu2}},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'momentum', {{0,0}});
net.layers{end+1} = struct('type', 'M_org',...
    'weights',{{Eta}},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'momentum', {{0}});
% the middle stages
for i = 1:1:stageN-2
    net.layers{end+1} = struct('type', 'X_mid',...
        'weights',{{Rho}},...
        'learningRate', LR, ...
        'weightDecay', WD, ...
        'momentum', {{0}});
    net.layers{end+1} = struct('type', 'A1_org',...
        'weights',{{mu2}},...
        'learningRate', LR, ...
        'weightDecay', WD, ...
        'momentum', {{0}});
    net.layers{end+1} = struct('type', 'C1',...
        'weights',{{ w1,b1 }},...
        'learningRate', LR, ...
        'weightDecay', WD, ...
        'pad', 1, ...
        'stride', 1,...
        'dilate', 1);
    net.layers{end+1} = struct('type', 'H',...
        'weights',{{linew}},...
        'learningRate', LR, ...
        'weightDecay', WD, ...
        'momentum', {{0}});
    net.layers{end+1} = struct('type', 'C2',...
        'weights',{{w2,b2}},...
        'learningRate', LR, ...
        'weightDecay', WD, ...
        'pad', 1, ...
        'stride', 1,...
        'dilate', 1);
    net.layers{end+1} = struct('type', 'A1_mid',...
        'weights',{{mu1,mu2}},...
        'learningRate', LR, ...
        'weightDecay', WD, ...
        'momentum', {{0,0}});
    net.layers{end+1} = struct('type', 'M_mid',...
        'weights',{{Eta}},...
        'learningRate', LR, ...
        'weightDecay', WD, ...
        'momentum', {{0}});
end
% the final stage
net.layers{end+1} = struct('type', 'X_mid',...
    'weights',{{Rho}},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'momentum', {{0}});
net.layers{end+1} = struct('type', 'A1_org',...
    'weights',{{mu2}},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'momentum', {{0}});
net.layers{end+1} = struct('type', 'C1',...
    'weights',{{ w1,b1}},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'pad', 1, ...
    'stride', 1,...
    'dilate', 1);
net.layers{end+1} = struct('type', 'H',...
    'weights',{{linew}},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'momentum', {{0}});
net.layers{end+1} = struct('type', 'C2',...
    'weights',{{w2,b2}},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'pad', 1, ...
    'stride', 1,...
    'dilate', 1);
net.layers{end+1} = struct('type', 'A1_mid',...
    'weights',{{mu1,mu2}},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'momentum', {{0,0}});
net.layers{end+1} = struct('type', 'M_final',...
    'weights',{{Eta}},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'momentum', {{0}});
net.layers{end+1} = struct('type', 'X_final',...
    'weights',{{ Rho}},...
    'learningRate', LR, ...
    'weightDecay', WD, ...
    'momentum', {{0}});
% loss layer
net.layers{end+1}.type = 'loss';
% net.layers{end+1} = struct('type', 'softmaxloss') ;
net = vl_simplenn_tidy(net) ;
